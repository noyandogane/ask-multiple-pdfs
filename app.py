import streamlit as st, dotenv as D, PyPDF2 as P, langchain.text_splitter as T, langchain.embeddings as E, langchain.vectorstores as V, langchain.chat_models as C, langchain.memory as M, langchain.chains as Ch, htmlTemplates as H; D.load_dotenv(); st.set_page_config(page_title="DocumentGPT", page_icon=":books:"); st.write(H.css, unsafe_allow_html=True); st.header("DocumentGPT :books:"); user_question = st.text_input("Ask a question about your documents:"); WHITELIST = ["user1", "user2", "user3"]; authenticate = lambda u, p: u in WHITELIST and p == "password"; login = lambda: (st.subheader("Login"), (st.text_input("Username"), st.text_input("Password", type="password")), st.button("Login"))[0] and st.success("Login successful!") or st.error("Invalid username or password.") if st.button("Login") and authenticate(*((st.text_input("Username"), st.text_input("Password", type="password")),)) else False; main = lambda: (login() and st.text_input("Ask a question about your documents:") or st.stop()) if user_question or not st.stop() else (P.PdfReader((pdf_docs := st.sidebar.file_uploader("Upload your PDFs here and click on 'Process'", accept_multiple_files=True))) and (doc_handler := (lambda p: (lambda t: (lambda c: (st.success("Done! You can now ask questions about your documents.") or st.session_state.__setitem__("conversation", Ch.ConversationalRetrievalChain.from_llm(C.ChatOpenAI(), V.FAISS.from_texts(texts=t, embedding=E.OpenAIEmbeddings()), M.ConversationBufferMemory(memory_key='chat_history', return_messages=True)))))(T.CharacterTextSplitter(separator="\n", chunk_size=1000, chunk_overlap=200, length_function=len).split_text(t)))(P.PdfReader(p).pages.extract_text())))(pdf_docs) or st.spinner("Processing") and st.stop() or None) and st.write("Thinking...") or st.sidebar.subheader("Your documents") or st.sidebar.button("Process")
main()
